using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["pa_ringbuffer"], :pa_ringbuffer),
    # FileProduct(prefix, "include/pa_ringbuffer.h", :pa_ringbuffer_h),
]

# Download binaries from hosted location
bin_prefix = "https://s3.us-east-2.amazonaws.com/ringbuffersbuilder"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/pa_ringbuffer.v19.6.0.aarch64-linux-gnu.tar.gz", "8724038e5c3bec6159e5f5816d9b2e4aea14f1006c019dcba3d2fe1f345b7639"),
    Linux(:aarch64, :musl) => ("$bin_prefix/pa_ringbuffer.v19.6.0.aarch64-linux-musl.tar.gz", "61818246bac6925543906319648eb50d8c2deac1380cb892f4ee0ecbd6fc8389"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/pa_ringbuffer.v19.6.0.arm-linux-gnueabihf.tar.gz", "c24a9abc0a07e48d9cc2ebd332479e2affac505e295593d37585339680ad0a37"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/pa_ringbuffer.v19.6.0.arm-linux-musleabihf.tar.gz", "8301c7b87e75bd049a41d72c3ee1f902912fd73315fcc73bbb3705598aa32407"),
    Linux(:i686, :glibc) => ("$bin_prefix/pa_ringbuffer.v19.6.0.i686-linux-gnu.tar.gz", "f00ab4e1727ba60e4305363241ce834e32898448f1eec8c6664f3a4a729886f6"),
    Linux(:i686, :musl) => ("$bin_prefix/pa_ringbuffer.v19.6.0.i686-linux-musl.tar.gz", "a7c5bcac2f24448ced2b2b6ef350fc8b8124be3e834b410733a6f0b67a2f0df3"),
    Windows(:i686) => ("$bin_prefix/pa_ringbuffer.v19.6.0.i686-w64-mingw32.tar.gz", "134a1c5e27ed634183527aefab5e62715ebaf23b462ef006fc72d4e9eaac2b7b"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/pa_ringbuffer.v19.6.0.powerpc64le-linux-gnu.tar.gz", "fb69d38b4221c6163072b86b7a11efd78d91c5279d89e005bc166bc74d805af7"),
    MacOS(:x86_64) => ("$bin_prefix/pa_ringbuffer.v19.6.0.x86_64-apple-darwin14.tar.gz", "d0441ce81f7dedd42e8fef353d946e3e45da8d3b4537d76ad0086d263e14da26"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/pa_ringbuffer.v19.6.0.x86_64-linux-gnu.tar.gz", "7a7dfae0106f31e62f5f4a3de1860c84dfafb6395dd6a507027d9a0c405c42bb"),
    Linux(:x86_64, :musl) => ("$bin_prefix/pa_ringbuffer.v19.6.0.x86_64-linux-musl.tar.gz", "e6de813624b9023a638bce804de5df012093f90e2fecf7b9aad91cecc1a4dc7e"),
    FreeBSD(:x86_64) => ("$bin_prefix/pa_ringbuffer.v19.6.0.x86_64-unknown-freebsd11.1.tar.gz", "a5abb7de8881c59aadc6c3ff028ed360cdb6ad457f432808af4a4934aa11b44e"),
    Windows(:x86_64) => ("$bin_prefix/pa_ringbuffer.v19.6.0.x86_64-w64-mingw32.tar.gz", "2908d3cca37e8af3d307b290f8c0ccafd0c835f61a0f11707af9d90ccc055079"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error(string("$(triplet(platform_key())) is not a supported platform. ",
                 "Please see https://github.com/JuliaAudio/RingBuffersBuilder if ",
                 "you'd like to build your own"))
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
